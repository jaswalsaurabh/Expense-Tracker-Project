[{"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\index.js":"1","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\App.js":"2","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\context\\context.js":"3","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\styles.js":"4","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\context\\contextReducer.js":"5","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\Main.jsx":"6","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Details\\Details.jsx":"7","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\styles.js":"8","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Details\\styles.js":"9","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\useTransactions.js":"10","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\InfoCard.jsx":"11","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\Form\\Form.jsx":"12","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\List\\List.jsx":"13","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\constants\\categories.js":"14","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\List\\styles.js":"15","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\Form\\styles.js":"16","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\utils\\formatDate.js":"17","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Snackbar\\Snackbar.jsx":"18","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Snackbar\\styles.js":"19"},{"size":423,"mtime":1623558198755,"results":"20","hashOfConfig":"21"},{"size":2863,"mtime":1623601108996,"results":"22","hashOfConfig":"21"},{"size":1003,"mtime":1623558198754,"results":"23","hashOfConfig":"21"},{"size":647,"mtime":1623559962006,"results":"24","hashOfConfig":"21"},{"size":790,"mtime":1623558198754,"results":"25","hashOfConfig":"21"},{"size":1435,"mtime":1623558198752,"results":"26","hashOfConfig":"21"},{"size":687,"mtime":1623558198749,"results":"27","hashOfConfig":"21"},{"size":575,"mtime":1623558198752,"results":"28","hashOfConfig":"21"},{"size":240,"mtime":1623558198749,"results":"29","hashOfConfig":"21"},{"size":1314,"mtime":1623558198756,"results":"30","hashOfConfig":"21"},{"size":485,"mtime":1623558198750,"results":"31","hashOfConfig":"21"},{"size":5190,"mtime":1623558198750,"results":"32","hashOfConfig":"21"},{"size":1684,"mtime":1623558198751,"results":"33","hashOfConfig":"21"},{"size":1691,"mtime":1623558198753,"results":"34","hashOfConfig":"21"},{"size":414,"mtime":1623558198751,"results":"35","hashOfConfig":"21"},{"size":245,"mtime":1623558198751,"results":"36","hashOfConfig":"21"},{"size":361,"mtime":1623558198756,"results":"37","hashOfConfig":"21"},{"size":927,"mtime":1623558198753,"results":"38","hashOfConfig":"21"},{"size":204,"mtime":1623558198753,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7741k8",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\index.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\App.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\context\\context.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\styles.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\context\\contextReducer.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\Main.jsx",[],["80","81"],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Details\\Details.jsx",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\styles.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Details\\styles.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\useTransactions.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\InfoCard.jsx",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\Form\\Form.jsx",["82"],"import React, { useState,useContext, useEffect } from 'react'\r\nimport {TextField,Typography,Grid,Button,FormControl,InputLabel,Select,MenuItem} from '@material-ui/core';\r\nimport {ExpenseTrackerContext} from '../../../context/context'\r\nimport {v4 as uuidv4} from 'uuid'\r\nimport useStyles from './styles';\r\nimport {incomeCategories,expenseCategories} from '../../../constants/categories'\r\nimport formatDate from '../../../utils/formatDate'\r\nimport {useSpeechContext} from '@speechly/react-client'\r\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\r\n\r\nconst initialState = {\r\n    amount: '',\r\n    category: '',\r\n    type: 'Income',\r\n    date: formatDate(new Date()),\r\n}\r\n\r\nconst Form = () => {\r\n    const classes  = useStyles();\r\n    const [formData, setFormData] = useState(initialState)\r\n    const {addTransaction} = useContext(ExpenseTrackerContext);\r\n    const {segment} = useSpeechContext();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const createTransaction =()=>{\r\n        if(Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\r\n\r\n        const transaction = {...formData,amount: Number(formData.amount), id: uuidv4() }\r\n\r\n        setOpen(true)\r\n        addTransaction(transaction);\r\n        setFormData(initialState)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(segment){\r\n            if(segment.intent.intent === 'add_expense'){\r\n                setFormData({...formData, type: 'Expense'})\r\n            }else if(segment.intent.intent === 'add_income'){\r\n                setFormData({...formData, type: 'Income'})\r\n            }else if(segment.isFinal && segment.intent.intent === 'create_transaction'){\r\n                return createTransaction();\r\n            }else if(segment.isFinal && segment.intent.intent === 'cancel_transaction'){\r\n                return setFormData(initialState)\r\n            }\r\n            \r\n            segment.entities.forEach((e)=>{\r\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`;\r\n                switch (e.type) {\r\n                    case 'amount':\r\n                        setFormData({...formData, amount: e.value})\r\n                        break;\r\n                        case 'category':\r\n                            if(incomeCategories.map((iC)=>iC.type).includes(category)){\r\n                                setFormData({...formData,type: 'Income', category})\r\n                            }else if(expenseCategories.map((iC)=>iC.type).includes(category)){\r\n                                setFormData({...formData,type: 'Expense', category})\r\n                            }\r\n                        break;\r\n                    case 'date':\r\n                        setFormData({...formData, date: e.value})\r\n                        break;\r\n                \r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            })\r\n\r\n            if(segment.isFinal && formData.amount && formData.category && formData.type && formData.date){\r\n                createTransaction(); \r\n            }\r\n\r\n        }\r\n    }, [segment])\r\n\r\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\r\n\r\n\r\n    return (\r\n        <Grid container spacing={2} >\r\n        <CustomizedSnackbar open={open} setOpen ={setOpen} />\r\n            <Grid item xs={12} >\r\n                <Typography align='center' variant='subtitle2' gutterBottom >\r\n                    {segment && (\r\n                        <>\r\n                        {segment.words.map((w)=> w.value).join(' ')}\r\n                        </>\r\n                    ) }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={6} >\r\n                <FormControl fullWidth >\r\n                <InputLabel  >Type</InputLabel>\r\n                <Select value={formData.type} onChange={(e)=> setFormData({...formData, type: e.target.value}) } >\r\n                    <MenuItem value='Income' >Income</MenuItem>\r\n                    <MenuItem value='Expense' >Expense</MenuItem>\r\n                </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6} >\r\n                <FormControl fullWidth >\r\n                    <InputLabel>Category</InputLabel>\r\n                    <Select value={formData.category} onChange={(e)=> setFormData({...formData, category: e.target.value})} >\r\n                    {selectedCategories.map((c)=> <MenuItem key={c.type} value={c.type} >{c.type }</MenuItem>)}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6} >\r\n                <TextField type='number' label='Amount'  fullWidth value={formData.amount} onChange={(e)=> setFormData({...formData, amount: e.target.value})}  />\r\n            </Grid>\r\n            <Grid item xs={6} >\r\n                <TextField type='date' label='Date'  fullWidth value={formData.date} onChange={(e)=> setFormData({...formData, date: formatDate(e.target.value)})} />\r\n            </Grid>\r\n            <Button className={classes.button} variant='outlined' color='primary' fullWidth onClick={createTransaction}  >Create</Button>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\List\\List.jsx",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\constants\\categories.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\List\\styles.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Main\\Form\\styles.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\utils\\formatDate.js",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Snackbar\\Snackbar.jsx",[],"C:\\Users\\jaswa\\Desktop\\covidTracker-master\\Expense-Tracker-Project\\src\\components\\Snackbar\\styles.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":75,"column":8,"nodeType":"89","endLine":75,"endColumn":17,"suggestions":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"96","text":"97"},[3071,3080],"[createTransaction, formData, segment]"]