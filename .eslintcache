[{"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\index.js":"1","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\App.js":"2","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\context\\context.js":"3","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\styles.js":"4","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\context\\contextReducer.js":"5","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\Main.jsx":"6","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Details\\Details.jsx":"7","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\styles.js":"8","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Details\\styles.js":"9","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\useTransactions.js":"10","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\InfoCard.jsx":"11","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\List\\List.jsx":"12","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\Form\\Form.jsx":"13","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\constants\\categories.js":"14","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\utils\\formatDate.js":"15","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Snackbar\\Snackbar.jsx":"16","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Snackbar\\styles.js":"17","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\Form\\styles.js":"18","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\List\\styles.js":"19"},{"size":408,"mtime":1612009932000,"results":"20","hashOfConfig":"21"},{"size":1500,"mtime":1612009932000,"results":"22","hashOfConfig":"21"},{"size":969,"mtime":1612009932000,"results":"23","hashOfConfig":"21"},{"size":551,"mtime":1612009932000,"results":"24","hashOfConfig":"21"},{"size":758,"mtime":1612009932000,"results":"25","hashOfConfig":"21"},{"size":1395,"mtime":1621782985804,"results":"26","hashOfConfig":"21"},{"size":664,"mtime":1621782507668,"results":"27","hashOfConfig":"21"},{"size":549,"mtime":1621781996557,"results":"28","hashOfConfig":"21"},{"size":230,"mtime":1612009932000,"results":"29","hashOfConfig":"21"},{"size":1326,"mtime":1621781707767,"results":"30","hashOfConfig":"21"},{"size":468,"mtime":1621782443457,"results":"31","hashOfConfig":"21"},{"size":1624,"mtime":1621782746911,"results":"32","hashOfConfig":"21"},{"size":5070,"mtime":1612009932000,"results":"33","hashOfConfig":"21"},{"size":1659,"mtime":1612009932000,"results":"34","hashOfConfig":"21"},{"size":342,"mtime":1612009932000,"results":"35","hashOfConfig":"21"},{"size":893,"mtime":1612009932000,"results":"36","hashOfConfig":"21"},{"size":195,"mtime":1612009932000,"results":"37","hashOfConfig":"21"},{"size":234,"mtime":1612009932000,"results":"38","hashOfConfig":"21"},{"size":398,"mtime":1612009932000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1g8v7lm",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\index.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\App.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\context\\context.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\styles.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\context\\contextReducer.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\Main.jsx",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Details\\Details.jsx",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\styles.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Details\\styles.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\useTransactions.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\InfoCard.jsx",[],["80","81"],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\List\\List.jsx",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\Form\\Form.jsx",["82"],"import React, { useState,useContext, useEffect } from 'react'\nimport {TextField,Typography,Grid,Button,FormControl,InputLabel,Select,MenuItem} from '@material-ui/core';\nimport {ExpenseTrackerContext} from '../../../context/context'\nimport {v4 as uuidv4} from 'uuid'\nimport useStyles from './styles';\nimport {incomeCategories,expenseCategories} from '../../../constants/categories'\nimport formatDate from '../../../utils/formatDate'\nimport {useSpeechContext} from '@speechly/react-client'\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\n\nconst initialState = {\n    amount: '',\n    category: '',\n    type: 'Income',\n    date: formatDate(new Date()),\n}\n\nconst Form = () => {\n    const classes  = useStyles();\n    const [formData, setFormData] = useState(initialState)\n    const {addTransaction} = useContext(ExpenseTrackerContext);\n    const {segment} = useSpeechContext();\n    const [open, setOpen] = useState(false);\n\n    const createTransaction =()=>{\n        if(Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n\n        const transaction = {...formData,amount: Number(formData.amount), id: uuidv4() }\n\n        setOpen(true)\n        addTransaction(transaction);\n        setFormData(initialState)\n    }\n\n    useEffect(() => {\n        if(segment){\n            if(segment.intent.intent === 'add_expense'){\n                setFormData({...formData, type: 'Expense'})\n            }else if(segment.intent.intent === 'add_income'){\n                setFormData({...formData, type: 'Income'})\n            }else if(segment.isFinal && segment.intent.intent === 'create_transaction'){\n                return createTransaction();\n            }else if(segment.isFinal && segment.intent.intent === 'cancel_transaction'){\n                return setFormData(initialState)\n            }\n            \n            segment.entities.forEach((e)=>{\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`;\n                switch (e.type) {\n                    case 'amount':\n                        setFormData({...formData, amount: e.value})\n                        break;\n                        case 'category':\n                            if(incomeCategories.map((iC)=>iC.type).includes(category)){\n                                setFormData({...formData,type: 'Income', category})\n                            }else if(expenseCategories.map((iC)=>iC.type).includes(category)){\n                                setFormData({...formData,type: 'Expense', category})\n                            }\n                        break;\n                    case 'date':\n                        setFormData({...formData, date: e.value})\n                        break;\n                \n                    default:\n                        break;\n                }\n\n            })\n\n            if(segment.isFinal && formData.amount && formData.category && formData.type && formData.date){\n                createTransaction(); \n            }\n\n        }\n    }, [segment])\n\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n\n\n    return (\n        <Grid container spacing={2} >\n        <CustomizedSnackbar open={open} setOpen ={setOpen} />\n            <Grid item xs={12} >\n                <Typography align='center' variant='subtitle2' gutterBottom >\n                    {segment && (\n                        <>\n                        {segment.words.map((w)=> w.value).join(' ')}\n                        </>\n                    ) }\n                </Typography>\n            </Grid>\n            <Grid item xs={6} >\n                <FormControl fullWidth >\n                <InputLabel  >Type</InputLabel>\n                <Select value={formData.type} onChange={(e)=> setFormData({...formData, type: e.target.value}) } >\n                    <MenuItem value='Income' >Income</MenuItem>\n                    <MenuItem value='Expense' >Expense</MenuItem>\n                </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6} >\n                <FormControl fullWidth >\n                    <InputLabel>Category</InputLabel>\n                    <Select value={formData.category} onChange={(e)=> setFormData({...formData, category: e.target.value})} >\n                    {selectedCategories.map((c)=> <MenuItem key={c.type} value={c.type} >{c.type }</MenuItem>)}\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6} >\n                <TextField type='number' label='Amount'  fullWidth value={formData.amount} onChange={(e)=> setFormData({...formData, amount: e.target.value})}  />\n            </Grid>\n            <Grid item xs={6} >\n                <TextField type='date' label='Date'  fullWidth value={formData.date} onChange={(e)=> setFormData({...formData, date: formatDate(e.target.value)})} />\n            </Grid>\n            <Button className={classes.button} variant='outlined' color='primary' fullWidth onClick={createTransaction}  >Create</Button>\n        </Grid>\n    )\n}\n\nexport default Form\n","C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\constants\\categories.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\utils\\formatDate.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Snackbar\\Snackbar.jsx",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Snackbar\\styles.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\Form\\styles.js",[],"C:\\Users\\jaswa\\Desktop\\Expense-Tracker-master\\Expense-Tracker-master\\src\\components\\Main\\List\\styles.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":75,"column":8,"nodeType":"89","endLine":75,"endColumn":17,"suggestions":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"96","text":"97"},[2997,3006],"[createTransaction, formData, segment]"]